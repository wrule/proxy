问: 使用XSea性能测试平台的完整流程是什么?
答: 完整流程为:1.创建产品和计划 2.编写或上传性能测试脚本 3.在被测系统安装监控探针 4.创建测试目标并关联脚本 5.配置并发用户数和运行时长等参数 6.执行压测并实时监控 7.分析压测报告和性能问题 8.输出测试报告

问: 如何在XSea平台开始一个新的性能测试项目?
答: 首先在对应业务线的产品下创建一个计划,填写项目信息如版本号、测试需求等。然后在计划下创建测试目标,选择目标类型(基准场景、单场景等),并关联压测脚本。最后配置压测参数后即可开始执行。

问: 执行压测前需要做哪些准备工作?
答: 主要需要:1.确保被测系统已正确安装监控探针 2.准备好性能测试脚本和测试数据 3.在数据工厂上传必要的数据文件 4.设置好目标的SLA评估项 5.检查压力机状态是否正常 6.确认压测时间窗口未与其他测试冲突

问: XSea平台如何实现分布式压测?
答: 平台支持自动分布式压测,只需配置总并发用户数,系统会自动分配到多台压力机上。数据文件会被自动切分到各压力机,保证数据互不重复。压测过程中会自动汇总各压力机的数据,生成统一的测试报告。

问: 压测过程中如何实时监控性能指标?
答: 可以在压测执行页面实时查看:1.TPS和响应时间趋势图 2.并发用户数曲线 3.应用的CPU和内存使用率 4.请求成功率等指标。同时可以查看每台压力机的运行日志和错误日志。

问: 如何确定一次压测是否成功?
答: 主要看以下几点:1.检查是否达到目标设置的评估项要求 2.查看事务成功率是否正常 3.观察系统资源使用是否合理 4.分析是否有异常错误日志 5.检查监控指标是否符合预期 6.查看业务功能是否正常

问: 压测后如何分析性能瓶颈?
答: 可以:1.查看事务统计详情找到响应较慢的请求 2.通过调用链路分析定位耗时较长的服务 3.使用代码剖析功能分析方法级别的性能问题 4.查看CPU、内存等系统资源使用情况 5.分析慢SQL和中间件性能指标

问: XSea平台支持哪些类型的测试场景?
答: 平台支持四种测试场景:1.基准场景-验证基本性能指标 2.单场景-测试单一业务场景 3.混合场景-模拟真实复杂业务 4.稳定性场景-长时间稳定性测试。可以根据测试目的选择合适的场景类型。

问: 如何在压测中复用测试资源?
答: 可以通过以下方式:1.使用数据工厂统一管理和复用测试数据文件 2.将常用脚本保存在脚本库中供团队共享 3.使用脚本片段功能复用通用测试逻辑 4.通过Shell脚本复用环境准备和清理操作

问: 如何导出压测报告?
答: 在报告模块创建新报告,选择需要的压测记录关联进报告,配置报告模板包含哪些内容(如性能指标、监控数据、问题记录等),然后可以导出Word格式的完整测试报告。也支持自定义报告模板。

问: XSea平台的探针有哪些类型?
答: XSea平台主要有两种探针类型:1.Javaagent探针-安装在Java应用进程中收集性能数据 2.独立探针(process agent)-安装在服务器上收集系统资源数据。此外还有各类中间件的exporter插件用于采集中间件指标。

问: 如何获取和安装探针?
答: 在方舟平台下载one-agent-xsea资源包,登录小二后台上传探针包。然后在PASS平台的探针管理-安装引导中,选择对应类型的探针进行安装。探针安装时需要指定应用名称和所属环境。

问: Javaagent探针安装失败的常见原因有哪些?
答: 常见原因包括:1.选择的探针包版本与应用JDK版本不匹配 2.安装账号权限不足 3.探针启动参数配置错误 4.与其他探针存在冲突 5.应用服务器防火墙限制 6.XCenter服务端口未开通

问: 探针安装后如何验证是否生效?
答: 可以通过以下方式验证:1.登录PAAS平台查看应用管理下是否有探针实例上报 2.查看探针安装目录下的日志是否有报错 3.执行压测查看是否能采集到监控数据 4.检查链路追踪功能是否正常

问: 探针采集哪些类型的数据?
答: 探针主要采集:1.应用性能指标如JVM内存、线程等 2.主机资源指标如CPU、内存使用率 3.请求调用链路数据 4.SQL执行信息 5.方法级别的性能分析数据 6.中间件性能指标

问: 探针对应用性能有多大影响?
答: 探针对应用性能影响很小。修改链路采样率不会降低性能损耗,因为底层需要采集每笔请求以实现完整监控。采样率只影响数据上报频率,不影响应用性能。通常性能损耗在5%以内。

问: 探针的数据上报机制是什么?
答: 探针采集的数据通过以下流程上报:1.Javaagent定时采集应用数据 2.通过XCenter服务转发 3.经过Kafka消息队列 4.由Flink进行数据聚合处理 5.最终存储到Prometheus等存储系统中

问: 一个应用需要装几个探针?
答: 通常一个应用需要:1.Java应用进程安装Javaagent探针采集应用数据 2.服务器安装node exporter采集主机资源 3.如果使用中间件,需要安装对应的exporter。不同探针采集不同维度数据。

问: 探针安装需要重启应用吗?
答: 是的,安装Javaagent探针需要重启应用才能生效,因为需要在应用启动参数中加入探针相关配置。但独立探针和exporter插件的安装不需要重启应用,可以直接部署使用。

问: 探针的监控数据保存多久?
答: 不同类型数据保存时间不同:1.链路数据保存3天 2.Prometheus监控指标保存15天 3.应用性能数据永久保存在数据库中 4.探针日志文件会定期清理。可以通过配置修改保存时间。

问: XSea平台支持哪些类型的脚本?
答: 支持4种类型:1.JMeter脚本-主流性能测试脚本 2.Gatling脚本-高性能压测脚本 3.Shell脚本-用于前后置任务 4.SeaMeter脚本-平台自研的低代码编排脚本。JMeter和Gatling用于发压,Shell用于环境准备和清理。

问: JMeter脚本在平台上有哪些使用限制?
答: 主要限制有:1.脚本大小建议不超过10MB 2.只支持JMeter 5.1版本 3.线程组名称不能重复 4.同一线程组内事务名不能重复 5.不支持多层吞吐量控制器 6.脚本名称不能包含特殊字符如$和& 7.思考时间不支持随机数

问: 如何调试脚本确保其可用性?
答: 脚本调试步骤:1.设置并发数为1和循环次数为1 2.检查数据文件和依赖是否完整 3.观察请求返回是否正常 4.查看调用链路是否完整 5.确认断言设置是否合理 6.检查日志是否有异常。调试成功后才能进行正式压测。

问: 脚本中的数据文件如何管理?
答: 数据文件管理规则:1.首行必须为变量名 2.可选择拆分或不拆分模式 3.拆分模式下会自动分配到多台压力机 4.不拆分模式下所有压力机使用相同数据 5.文件建议通过数据工厂统一管理 6.支持CSV和TXT格式

问: 如何在多个脚本间共享和复用数据?
答: 可以通过以下方式:1.将公共数据文件上传到数据工厂 2.多个脚本引用同一个数据文件 3.使用脚本片段功能复用通用逻辑 4.注意多脚本时变量名不能重复 5.通过数据工厂统一维护和更新共享数据

问: 为什么本地调试正常的脚本在平台上运行失败?
答: 常见原因:1.脚本依赖的数据文件未上传 2.域名解析配置不同 3.使用了一次性数据或变量 4.字符集编码问题导致乱码 5.压力机无法访问目标IP 6.与其他三方组件版本不兼容 7.缺少必要的插件依赖

问: Shell脚本如何与压测流程结合?
答: Shell脚本可以用于:1.压测前准备环境和数据 2.压测后清理数据和日志 3.检查系统状态是否正常 4.备份或导出测试数据 5.执行特定的运维操作。通过前后置任务配置与压测流程集成。

问: SeaMeter脚本有什么特点和优势?
答: SeaMeter特点:1.基于低代码方式编排测试流程 2.无需编写复杂的测试代码 3.可视化配置测试参数 4.支持常见协议如HTTP和Dubbo 5.更容易上手和维护 6.适合简单的接口压测场景

问: 脚本调试时如何查看完整日志?
答: 可以通过:1.在压力机上查看运行日志(/tmp/job/taskid.log) 2.查看请求日志(test_scripts/taskid/log/request.log) 3.查看错误日志(test_scripts/taskid/log/error.log) 4.页面上可以导出全量日志文件

问: 多个脚本组合压测时要注意什么?
答: 注意事项:1.多脚本间变量名不能重复 2.数据文件名不能重复 3.HTTP头管理器建议放在线程组下 4.确保脚本之间执行顺序合理 5.注意总体资源使用是否合理 6.建议分开调试后再组合测试

问: 部署Javaagent探针的具体步骤是什么?
答: 步骤如下:1.从方舱下载one-agent-xsea资源包 2.上传到PAAS平台的探针配置管理 3.在应用管理选择正确版本的探针包 4.在Java应用启动参数中添加-javaagent配置 5.指定应用名和XCenter地址 6.重启应用使探针生效

问: Javaagent探针部署失败的常见原因和解决方法?
答: 常见原因和解决方法:1.JDK版本不匹配-选择对应版本探针 2.启动参数配置错误-检查-javaagent路径 3.账号权限不足-赋予足够权限 4.端口未开通-开通17951/17950端口 5.与其他探针冲突-调整加载顺序

问: 如何验证探针是否部署成功?
答: 验证方法:1.检查应用启动日志是否有探针加载信息 2.查看探针目录下的core/common-error.log是否有错误 3.登录PAAS平台查看实例是否上报 4.执行压测查看是否有监控数据 5.观察调用链路是否正常显示

问: 探针部署时需要准备哪些环境条件?
答: 环境条件:1.应用服务器有足够磁盘空间 2.Java应用使用JDK1.8及以上版本 3.服务器网络能访问XCenter 4.开通必要的防火墙端口 5.具备应用重启权限 6.确保17951/17950端口未被占用

问: 多机部署时探针如何配置?
答: 多机配置:1.每个Java进程都需要安装Javaagent探针 2.保持各节点探针版本一致 3.配置相同的应用名和环境 4.确保都能连接到XCenter 5.所有节点探针配置参数需保持一致

问: 探针的环境区分有什么作用?
答: 环境区分作用:1.对应用实例进行分组管理 2.区分不同环境的监控数据 3.控制不同环境的探针行为 4.便于多环境数据隔离 5.可针对不同环境设置不同的监控策略

问: 探针部署后如何修改配置?
答: 修改配置方法:1.调整应用启动参数中的探针配置 2.修改探针目录下的配置文件 3.重启应用使配置生效 4.部分配置可通过PAAS平台动态修改 5.某些核心配置需要重启应用才能生效

问: 探针和其他APM工具冲突如何处理?
答: 处理方法:1.调整探针加载顺序,XSea探针需放在其他探针之前 2.检查是否有配置冲突 3.必要时关闭重复的监控功能 4.确保使用兼容的版本 5.验证各工具功能是否正常

问: 不同操作系统下探针如何部署?
答: 各系统部署说明:1.Linux系统直接使用标准部署步骤 2.Windows需注意路径格式和权限 3.AIX/Solaris需替换自带JRE 4.容器环境需挂载探针目录 5.注意不同系统的环境变量配置方式

问: 探针部署后占用多少系统资源?
答: 资源占用情况:1.内存占用通常在100-200MB 2.CPU使用率影响在5%以内 3.磁盘主要存储日志文件 4.网络带宽消耗较小 5.整体对系统性能影响很小

问: 压测记录中为什么显示的停止原因是压测超时?
答: 超时停止原因:1.压测引擎启动时间较长导致超出预期停止时间 2.平台默认超出预期停止时间10秒后会强制停止 3.出现超时可能是因为脚本复杂或线程数过大 4.也可能是添加链路agent导致启动较慢 5.可通过修改TIME_OUT_RUNNING参数调整超时时间

问: 为什么压测TPS比实际要高很多,甚至高出一倍?
答: 一般是由部署问题导致:1.需要检查XSea-merge任务是否只有一个 2.多个XSea-merge任务会重复计算数据 3.在方舱监控页面确认任务数量 4.如果发现多个需要清理多余任务 5.重新部署保证只有一个任务实例

问: 事务TPS趋势图和资源监控趋势图的时间刻度为什么对应不上?
答: 原因是数据来源不同:1.压测数据和监控数据独立采集存储 2.资源数据从Prometheus查询获取,存在时间误差 3.系统通过定时任务拉取各服务器监控数据 4.不同服务器响应时间有偏差 5.监控数据时间刻度具有一定容忍度

问: 数据文件有什么格式要求和限制?
答: 数据文件规则:1.第一行必须是变量名 2.[小于4.9.1版本]分为一次性和重复使用两种类型 3.[大于等于4.9.1版本]改为拆分和不拆分两种类型 4.参数化文件仅支持txt和csv格式 5.文件大小建议不超过200MB

问: 压测过程中监控数据更新频率是怎样的?
答: 数据更新规则:1.4.5版本之前所有数据2秒更新一次 2.4.6版本后dashboard详情数据5秒更新一次 3.其他数据维持2秒更新频率 4.趋势图数据根据压测时长自动调整显示粒度 5.实时数据有约5-10秒延迟

问: 压测记录中的各类数据保存多长时间?
答: 数据保存策略:1.事务统计数据永久保存 2.链路数据保存3天 3.Prometheus监控指标保存15天 4.错误日志保存3天 5.可以通过配置修改保存时间

问: 目标的评估项如何判断通过与否?
答: 评估规则:1.压测结束时若存在未通过评估项则整体不通过 2.不存在未通过评估项则为通过 3.评估项检查实际执行的条数可能少于设置条数 4.当评估对象为全部时会展开到具体对象 5.压测结束后仍可能因延迟数据导致评估结果变化

问: 压测记录中链路采样率如何设置?
答: 采样规则:1.默认每台压力机每个请求每2秒采集一次链路 2.可通过JVM参数-Dtrace.sample.interval调整间隔 3.修改采样率不会降低性能损耗 4.采样率只影响数据上报频率 5.压测中展示最近5分钟有链路的散点

问: 定时任务执行中如何取消?
答: 取消方法:1.[4.11.8版本前]只能通过重启XSea或移除压力机方式取消 2.[4.11.8版本后]可直接在页面上取消 3.取消不会影响已执行完成的子任务数据 4.建议执行前仔细确认定时任务配置

问: 报告模板如何设置默认内容?
答: 设置步骤:1.新建报告设置默认内容但不关联记录 2.获取设置内容的提交数据 3.修改test-report-template.json文件 4.重新部署xsea服务 5.注意高版本模板可能不适用于低版本

问: XSea平台的安装环境要求是什么?
答: 环境要求:1.操作系统支持CentOS7+、RedHat7+、Ubuntu18+等 2.CPU架构支持arm64和amd64 3.需要root用户权限 4.服务器需是纯净未安装docker和nginx 5.机器资源充足且多机部署时需要网络互通和时间同步

问: 安装方舱和XSea的完整流程是什么?
答: 安装流程:1.先安装方舱作为可视化安装平台 2.在方舱的productsets目录上传XSea产品包 3.添加安装服务器并初始化 4.配置部署方案 5.部署基础组件 6.执行数据初始化 7.验证license 8.部署业务应用 9.执行业务初始化

问: 如何进行多机部署?
答: 多机部署步骤:1.添加多台服务器并初始化 2.根据应用特点规划部署方案 3.注意zk和minio等组件的特殊部署要求 4.配置各组件的集群参数 5.按顺序部署各个组件 6.验证集群功能是否正常

问: 如何查看容器日志和进程?
答: 查看方法:1.使用docker ps查看所有容器进程 2.使用docker logs -f containerName查看容器日志 3.在方舱页面可以直接查看应用运行日志 4.日志默认位于服务器的/home/perfma/data/service目录 5.错误日志在logs目录下

问: 产品升级时需要注意什么?
答: 升级注意事项:1.先升级方舱再升级产品集 2.升级前备份重要数据 3.查看版本说明了解不兼容变更 4.遵循版本升级路径 5.执行必要的数据迁移脚本 6.验证各功能是否正常

问: kafka堆积问题如何解决?
答: 解决方案:1.检查是否有废弃的消费组 2.使用kafka命令查看具体堆积情况 3.删除不需要的消费组 4.适当增加kafka分区数 5.优化消费者处理能力 6.必要时清理历史数据

问: 如何清空测试环境?
答: 清空步骤:1.先卸载所有应用 2.删除所有服务器 3.等待3-5分钟清理docker残留 4.执行方舱卸载命令 5.重新登录服务器 6.注意事项:数据将无法恢复,请谨慎操作

问: 服务异常时如何排查?
答: 排查步骤:1.查看方舱运行监控状态 2.检查容器是否正常运行 3.查看应用日志是否有错误 4.检查系统资源使用情况 5.验证网络连接是否正常 6.必要时收集日志联系技术支持

问: 平台磁盘满了如何处理?
答: 处理方法:1.停止方舱服务 2.停止docker服务 3.将docker目录迁移到空间较大的目录 4.修改daemon.json配置 5.修改xshelter.conf中的路径 6.启动服务并验证

问: 如何修改各组件的配置?
答: 修改方法:1.通过Apollo配置中心修改应用配置 2.修改docker-compose配置文件 3.部分配置需要重启服务生效 4.修改后在方舱重新部署相关应用 5.验证修改是否生效

问: 如何在Apollo中配置XSea的参数?
答: 配置步骤:1.登录Apollo(默认端口8503) 2.选择要配置的应用 3.根据参数的namespace选择配置区域 4.添加或修改配置项 5.发布配置使其生效 6.某些配置可能需要重启相关服务

问: XSea中最重要的Apollo配置项有哪些?
答: 重要配置项:1.prometheus.data.step:监控数据采样间隔 2.use.xsky.monitor:是否强依赖xsky 3.open.jmeter:是否开启JMeter客户端功能 4.upload.max.filesize:上传文件大小限制 5.is.online:是否开启全链路压测 6.auto.increase.fuse:压力机CPU阈值

问: 如何修改监控数据的采样间隔?
答: 采样间隔配置:1.在xsea应用的application namespace下 2.修改prometheus.data.step参数 3.value设置为采样秒数 4.注意与xsky prometheus配置保持一致 5.修改后监控展示会随之调整

问: 如何配置文件上传大小限制?
答: 配置方法:1.修改upload.max.filesize参数 2.默认值为200M(209715200字节) 3.影响数据工厂文件上传 4.影响脚本数据管理中的上传 5.影响计划测试文档上传 6.注意不要设置过大避免系统负载

问: Apollo中的权限模型如何配置?
答: 权限配置:1.修改auth.model参数 2.value为1时使用基础只读权限范围 3.value为2时扩展调试和目标管理权限 4.value为3时添加产品设置权限 5.修改后需重启xsea后端并清空浏览器缓存

问: 自动加压功能如何配置?
答: 自动加压配置:1.auto.increase.rule.switch参数控制开关 2.auto.increase.fuse设置CPU阈值(0-100) 3.auto.increase.max.period.time设置持续时长上限 4.根据实际需求调整参数 5.建议先小范围测试验证

问: 报告相关的配置项有哪些?
答: 报告配置项:1.test.report.rel.report.count:关联记录最大条数 2.test.report.series.count:趋势图可选系列数 3.test.report.excel:是否允许导出excel 4.test.report.word.contain.rel.report:导出是否包含关联记录 5.建议根据实际使用量调整

问: 业务统计功能如何开启?
答: 开启步骤:1.修改support.submit.business为true 2.business.bound.multiple.transaction控制是否支持多事务绑定 3.重启相关服务生效 4.开启后可使用配置中心的业务数据配置 5.可在目标中进行业务绑定

问: 修改Apollo配置后如何生效?
答: 生效方式:1.部分配置修改后实时生效 2.部分配置需要重启对应服务 3.某些配置需要清除浏览器缓存 4.建议修改后观察日志确认生效 5.重要配置变更建议在业务量小时操作

问: 配置错误如何快速恢复?
答: 恢复方法:1.Apollo保留配置修改历史 2.可以回滚到之前的版本 3.建议记录修改前的配置值 4.重要配置建议先备份 5.确认配置生效后才进行下一步变更

问: 压力机的硬件配置要求是什么?
答: 基本要求:1.CPU:8核心以上 2.内存:16G以上 3.带宽:最低100M 4.磁盘空间:50G以上 5.操作系统支持CentOS7+/Ubuntu18+ 6.需要Java环境JDK1.8+ 7.建议使用物理机而不是云主机

问: 如何部署新的压力机?
答: 部署步骤:1.在方舱平台添加压力机服务器 2.初始化服务器环境 3.配置压力机的JDK环境 4.安装压力机agent 5.配置与XCenter的连接 6.验证压力机状态是否正常 7.测试是否可以执行压测任务

问: 压力机无法连接XCenter怎么处理?
答: 处理方法:1.检查防火墙是否开放17950端口 2.验证网络连通性 3.确认XCenter地址配置正确 4.查看agent日志是否有报错 5.检查证书是否正确 6.必要时重启agent服务

问: 一台压力机可以支持多少并发用户?
答: 并发能力说明:1.取决于机器配置,8核16G通常支持2000-3000并发 2.受脚本复杂度影响 3.建议单机并发不超过5000 4.需要考虑CPU使用率控制在70%以下 5.建议压测前进行单机能力评估

问: 压力机CPU使用率过高怎么处理?
答: 处理方案:1.检查是否有其他进程占用资源 2.调整单机并发数降低负载 3.开启CPU熔断保护机制 4.增加压力机数量分散压力 5.优化测试脚本降低资源消耗

问: 压力机如何做容量规划?
答: 规划方法:1.评估总体并发需求 2.按照单机2000-3000并发估算 3.预留30%容量余量 4.考虑多区域部署需求 5.规划时需考虑网络带宽限制 6.建议准备备用压力机

问: 压力机的监控指标有哪些?
答: 关键指标:1.CPU使用率 2.内存使用情况 3.网络带宽使用率 4.磁盘IO状况 5.JVM堆内存使用 6.GC频率和时间 7.运行中的压测任务数

问: 压力机网络带宽要求是多少?
答: 带宽要求:1.单机最低需要100M带宽 2.建议使用千兆网卡 3.需要考虑并发请求的数据量 4.压测大文件传输场景需要更大带宽 5.多压力机时注意总带宽占用

问: 如何管理多地域的压力机?
答: 管理方法:1.在方舱平台按区域分组管理 2.确保各地压力机能连接XCenter 3.配置就近的时间同步服务器 4.统一压力机版本和配置 5.考虑各地网络延迟差异

问: 压力机维护需要注意什么?
答: 维护要点:1.定期清理测试数据和日志 2.监控磁盘空间使用情况 3.保持agent版本更新 4.检查JDK版本兼容性 5.定期重启释放资源 6.备份重要配置文件

问: XSea平台的链路采样率是如何控制的?
答: XSea中的链路采样率由发压端控制,每台压力机上每个请求每2秒采集一笔链路。这样可以保证不会因为压测请求过多而占用过多存储。采样率的修改不会影响被测应用的性能损耗,只会影响服务端的计算和存储压力。

问: 为什么链路中请求耗时与实际响应时间不一致?
答: 链路中总耗时和响应时间可能不一致,原因是这两个是异步的 - 响应时间是调用接口的实际耗时,而链路总耗时是服务端处理的实际耗时。两者的起止时间点不同导致数值可能存在差异。

问: 如何判断链路调用是否完整?
答: 可以通过脚本调试时查看调用链是否完整。若调用链不完整,会影响定位接口性能瓶颈。需要确保调用链涉及的所有应用都已安装探针,且探针正常上报数据。

问: XSea链路数据保存多久?
答: 链路数据默认保存3天。储存在Clickhouse中,超过3天的链路数据会被自动清理。如需修改保存时长,需要修改系统配置。

问: 链路中的净耗时是什么含义?
答: 净耗时表示除去调用外部系统的时间后,应用自身的处理耗时。比如某个方法的净耗时就是该方法自身的执行时间,应用的净耗时就是该应用内部处理的时间。

问: 压测时没有看到链路数据怎么处理?
答: 首先检查被测应用是否正确安装探针,其次确认接口协议类型是否支持(目前仅支持HTTP和Dubbo),最后检查消息是否堆积(可能存在消息延迟)。

问: 链路散点图中红色和绿色点分别代表什么?
答: 散点图中绿色点表示请求响应符合脚本中设置的断言条件,红色点表示请求响应不符合断言条件。通过颜色可以直观看出请求成功与否。

问: 如何通过链路快速定位性能瓶颈?
答: 可以通过链路的瓶颈应用分析功能,查看该请求调用链中最慢的应用排行。点击应用可以看到具体接口的代码调用栈和耗时分布,从而定位到具体的性能瓶颈点。

问: JMeter脚本调用链路和本地执行的有什么区别?
答: XSea平台执行时会自动采集调用链数据,可以看到完整的调用链路和性能数据。而本地执行只能看到请求响应,无法看到服务端的调用链路信息。

问: 链路采样对被测应用性能有影响吗?
答: 链路采样率的调整不会降低对被测应用的性能影响。因为底层会采集每个请求用于监控分析,采样率只影响最终上报形成链路的数据量,主要影响服务端的存储压力。

问: XSea平台支持哪些类型的探针?
答: XSea支持两种类型探针:JavaAgent探针(用于Java应用监控)和独立探针(用于主机监控)。此外还支持各类中间件的exporter,用于监控MySQL、Redis、Kafka等中间件。

问: 如何获取正确的探针包?
答: 首先从方舱下载one-agent-xsea资源文件,然后在小二后台的探针配置管理中上传。上传成功后,在PaaS平台的探针管理-安装引导中可以选择对应类型的探针下载安装。

问: 探针安装后没有数据上报怎么处理?
答: 首先检查探针版本是否正确(需匹配JDK版本),其次检查启动参数是否正确配置,包括-javaagent路径和PERFMA_APP_CODE等。最后查看探针日志,进入探针安装目录下的log目录查看common-error.log排查具体原因。

问: 探针安装时环境需要注意什么?
答: 探针安装时需要注意:1.安装账号需要有足够权限 2.防火墙需要开放17950/17951端口 3.服务器时间需要同步 4.确保安装目录有足够磁盘空间。

问: 一个应用需要安装多个探针吗?
答: 一般一个Java进程只需要安装一个JavaAgent探针即可。如果需要监控主机资源,还需要在服务器上安装独立探针。同时如果有中间件需要监控,还需要安装对应的exporter。

问: 探针部署后对应用性能有多大影响?
答: 探针对应用的性能影响很小,一般在5%以内。探针采用采样方式收集数据,并且有流量控制机制,不会对业务造成明显影响。但建议在性能测试环境先进行验证。

问: 探针安装时应用分组有什么用?
答: 应用分组实际上是环境的概念,用于区分不同环境(如开发、测试、生产)的应用实例。同一个应用在不同环境安装探针时需要选择对应的环境,这样可以实现监控数据的环境隔离。

问: 安装探针后应用启动失败怎么办?
答: 可能原因:1.探针与JDK版本不匹配 2.启动参数配置错误 3.探针与其他Agent冲突。建议查看应用启动日志和探针日志排查,必要时可以先移除探针确认是否为探针导致。

问: 探针需要重启应用才能生效吗?
答: 是的,JavaAgent探针需要在应用启动参数中配置,因此需要重启应用才能生效。但独立探针和exporter是独立进程,安装后直接启动即可生效,无需重启被监控的应用。

问: 同一个服务器上的多个应用如何安装探针?
答: 每个Java应用都需要单独安装JavaAgent探针,在各自的启动参数中配置。但主机监控的独立探针和中间件exporter,同一台服务器只需要安装一个即可,它们会自动发现并监控服务器上的所有目标。

问: 为什么压测记录中的总请求数与客户自己统计的数据不一致?
答: 可能有三个原因:1.压测结束时可能存在消息延迟积压,建议等待20秒后刷新页面 2.Gatling脚本在压测结束时会直接停止,最后发出的请求可能未收到响应 3.同时压测目标过多可能导致数据丢弃。

问: 为什么同一服务器上多个应用统计的CPU使用率不一样?
答: 这是因为每个应用进程都安装了JavaAgent,各自独立采集主机资源数据。由于采集时间点可能存在几十到几百毫秒的差异,导致同一时刻的CPU使用率统计值略有不同。

问: TPS和响应时间趋势图的时间刻度为什么与监控趋势图不对应?
答: 这是因为压测数据和监控数据是独立采集存储的。监控数据来自Prometheus,其采集间隔和时间刻度与压测数据不同。另外系统通过定时任务拉取监控数据,不同服务器响应时间有偏差,导致时间刻度可能不完全对齐。

问: 响应时间趋势图中的最小值为什么小于表格中的最小值?
答: 因为计算方式不同。表格中的最小值是按单个请求计算的最小值,而趋势图是将多台压力机按秒聚合后的每秒请求的响应时间。聚合计算会导致数值存在差异。

问: 为什么压测过程中的TPS突然比平时高很多,甚至翻倍?
答: 这种情况通常是部署配置不当导致的。建议检查XSea-merge任务是否只有一个实例,多个实例会导致数据重复计算,使TPS显示异常偏高。

问: 为什么监控数据的时间范围比压测数据的范围要大?
答: 这有两个原因:1.Prometheus查询需要至少两个采样间隔才能获取第一个数据点,系统会延伸监控数据范围 2.压测过程中监控趋势图会展示最近5分钟数据,所以可能显示压测开始前的数据。

问: 事务下只有一个请求,为什么事务成功率为0而请求成功率是100%?
答: 这种情况通常是因为断言设置在事务级别而不是请求级别。虽然请求本身执行成功,但不符合事务层面设置的断言条件,因此事务成功率显示为0%。建议将断言设置在请求级别。

问: 压测实际运行时长为什么和目标设置的时长不一致?
答: 执行时间包含三部分:目标压测阶段开始到压测引擎启动的时间、真实压测时长、后置任务执行时间。另外,如果超过预期停止时间加上超时时间(默认10秒),系统会强制停止压测。

问: 链路中的请求耗时与散点图显示的耗时为什么不一致?
答: 这是因为链路和散点图的数据来源不同。链路数据反映的是服务端实际处理耗时,而散点图显示的是客户端感知到的整体响应时间,包含了网络传输等耗时,所以二者可能存在差异。

问: 为什么有时候事务的响应时间与请求的响应时间相差很大?
答: 有几种可能:1.如果是JMeter脚本且线程组按顺序执行,事务响应时间会等于所有请求耗时总和 2.检查请求后是否配置了思考时间 3.可能是部分数据未被统计到,建议检查Flink是否有数据丢弃。

问: XSea压力机部署的基本环境要求是什么?
答: 压力机要求Linux环境(CentOS/RedHat 7+),需要JDK 8或以上,建议4核8G配置。服务器需要能访问被测系统,并确保与XCenter(17950/17951端口)网络连通。部署前需保证服务器是纯净的,未安装过docker。

问: 如何验证压力机是否部署成功?
答: 可以通过三步验证:1.使用ps -ef|grep xshark检查进程是否存在 2.在平台压力机管理页面查看状态是否为在线 3.执行简单脚本调试验证是否能正常执行任务。

问: 压力机日志文件存放在哪里,保存多久?
答: 4.11.14版本后,压力机日志保存在压力机安装目录/logs/job下。当该目录所在磁盘空间使用率超过70%时,系统会每10秒执行一次清理,删除旧的日志文件。

问: 如何修改压力机的JVM参数?
答: 可以在平台压力机管理页面修改JVM参数。修改后需要重新使用压力机(调试或压测)才能生效。可以在压测引擎(JMeter或Gatling)中查看JVM参数是否生效。

问: 为什么压力机显示离线或者连接失败?
答: 常见原因有:1.网络连接问题,需检查与XCenter的连通性 2.压力机进程异常退出,需检查xshark日志 3.服务器资源不足,特别是内存使用率过高 4.系统时间不同步。需根据具体情况排查。

问: 一个压力机可以同时执行多个压测任务吗?
答: 不可以,一个压力机同一时间只能执行一个压测任务。这是为了保证压测数据的准确性,避免多个任务互相影响。如果需要同时执行多个压测,需要配置多个压力机。

问: 压力机执行时报文件找不到怎么处理?
答: 这通常是因为测试数据文件未正确上传或路径配置错误。需要检查:1.数据文件是否已上传到平台 2.脚本中引用的文件路径是否正确 3.查看压力机上的engineRootPath目录确认文件是否存在。

问: 如何确定需要部署多少台压力机?
答: 需要考虑以下因素:1.目标并发用户数 2.压力机硬件配置 3.脚本复杂度 4.网络带宽限制。一般建议单台压力机并发用户数不超过3000,根据实际压测需求和资源配置进行评估。

问: 压力机出现OOM怎么处理?
答: 处理步骤:1.检查压力机JVM参数配置是否合理 2.确认并发用户数是否超出压力机承载能力 3.检查脚本是否存在内存泄漏 4.适当增加压力机数量分散压力 5.必要时增加压力机物理内存。

问: 压力机为什么会出现socket closed错误?
答: 这通常是因为系统TCP连接数限制导致。需要执行压力机的环境初始化脚本,该脚本会自动优化系统参数,包括最大文件描述符数量、TCP配置等。如果仍然出现,需要检查网络连接情况。

问: XSea平台支持哪些熔断规则类型?
答: XSea支持多种熔断规则:1.TPS规则(达到指定TPS时熔断) 2.响应时间规则(超过指定响应时间熔断) 3.成功率规则(低于指定成功率熔断) 4.CPU使用率规则(超过指定使用率熔断) 5.平均响应时间规则。在≥4.10.0版本中,默认配置了压力机CPU阈值为95%的自动熔断。

问: 压测过程中触发熔断后会发生什么?
答: 触发熔断后,系统会立即停止压测任务,生成压测记录,并在记录中标注触发熔断的原因和时间点。这可以保护系统避免过度压测导致的故障,同时保留触发熔断时的性能数据供分析。

问: 如何设置合理的熔断规则阈值?
答: 需要根据业务场景和系统能力设置:1.TPS阈值参考系统容量规划 2.响应时间阈值参考SLA要求 3.成功率阈值通常建议不低于95% 4.CPU使用率阈值建议设置在80-90%之间 5.可以先进行小规模压测,根据系统表现调整阈值。

问: 熔断规则的检测频率是多少?
答: 系统默认每5秒检测一次熔断规则。对于CPU等资源指标,由于数据采集本身存在延迟,建议设置适当的缓冲值。例如如果要求CPU不超过90%,建议设置熔断阈值为85%。

问: 为什么设置了熔断规则但没有及时触发?
答: 可能的原因有:1.数据采集延迟导致检测滞后 2.监控数据上报间隔导致检测不够及时 3.检测窗口期设置不合理 4.数据聚合计算方式与预期不符。建议检查熔断规则配置和监控数据是否正常。

问: 多个熔断规则同时配置时如何生效?
答: 多个熔断规则是并行生效的,只要触发其中任何一个规则就会导致压测停止。建议根据实际需求配置必要的规则,避免规则之间互相干扰。不同规则之间是'或'的关系。

问: 自动熔断和手动停止有什么区别?
答: 自动熔断是系统根据预设规则自动停止压测,会在记录中标记具体的熔断原因和指标。手动停止是人为干预,通常在观察到异常或达到测试目标时主动结束压测。自动熔断更适合用来保护系统。

问: 熔断规则是否支持分段设置?
答: 是的,熔断规则可以根据压测阶段分别设置。比如在预热阶段可以设置较宽松的规则,在正式压测阶段设置更严格的规则。这样可以更准确地保护系统并获取有效的测试数据。

问: 如何查看熔断历史记录?
答: 在压测记录详情中可以查看是否发生过熔断,包括触发时间、触发规则和具体指标值。这些信息可以帮助分析系统瓶颈,优化熔断规则设置。

问: 压力机的CPU熔断规则和应用的CPU熔断规则有什么区别?
答: 压力机的CPU熔断规则是监控压力机自身资源使用情况,防止压力机成为瓶颈。应用的CPU熔断规则是监控被测应用的资源使用情况,用于保护被测系统。两者的监控对象和作用不同,建议同时配置。

问: XSea平台的应用、环境、产品之间是什么关系?
答: 应用是安装探针后的监控对象,环境用于对应用实例进行分组(如开发、测试环境)。产品是数据隔离的顶层概念,建议按业务线划分,每个产品下可以包含多个计划、脚本等资产,不同产品之间的资产相互隔离。

问: 一次性数据文件和重复使用文件有什么区别?
答: 从4.9.1版本开始,一次性文件改称为拆分文件,压测时会按压力机数量自动拆分,每台压力机使用不同数据避免冲突。而重复使用文件(不拆分文件)在压测时不会拆分,所有压力机重复使用相同数据。

问: XSea平台如何处理压测过程中的错误数据?
答: 平台将错误分为三类:1.发压异常(请求发送失败) 2.断言异常(不符合脚本断言) 3.状态码异常(HTTP状态码异常)。错误数据会在压测记录中展示,并支持按错误类型、关键字分类统计,方便分析问题。

问: 如何规范管理测试计划和目标?
答: 计划用于项目管理,可设置自定义字段记录版本号、需求编号等信息。目标是具体的测试场景,支持四种类型:基准场景、单场景、混合场景、稳定性场景。建议按测试目的选择合适的目标类型,并在目标中设置合理的评估项。

问: 压测数据的保存时效是怎样的?
答: 不同类型数据保存时间不同:1.事务统计数据永久保存 2.监控趋势数据保存15天 3.调用链路数据保存3天 4.错误日志保存3天。若需要长期保存数据,建议及时导出或生成报告。

问: 目标内关联多个脚本有什么注意事项?
答: 主要注意:1.单个目标最多关联100个同类型脚本 2.从4.9.1版本开始实现了变量隔离,不同脚本的变量名可以重复 3.多个脚本默认并行执行 4.建议脚本之间的运行互不影响。

问: 压测记录的通过与不通过是如何判定的?
答: 压测结束后,系统会检查所有配置的评估项。只要存在任何一个未通过的评估项,该压测记录就判定为不通过。如果所有评估项都通过,则判定为通过。建议根据实际需求设置合理的评估标准。

问: 定时任务如何管理和取消?
答: 4.11.8版本之后,可以直接在页面上取消定时任务。取消定时任务不会影响已经执行的测试记录。创建定时任务时需要使用crontab表达式设置执行时间,支持设置分钟、小时、日、月、周。

问: 压测过程中的实时数据刷新频率是多少?
答: 4.6版本之后,不同数据的刷新频率不同:Dashboard详情数据5秒刷新一次,其他数据2秒刷新一次。压测数据和监控数据是独立采集存储的,可能存在轻微的时间差。

问: 如何正确理解压测执行时间?
答: 执行时间包含三部分:1.目标压测阶段开始到压测引擎启动的时间 2.真实压测时长 3.后置任务执行时间。实际运行时长可能与设置的目标时长不完全一致,这是正常的。如果超出预期太多,可能是触发了超时停止机制。

问: 压测记录中的TPS和QPS有什么区别?
答: TPS(每秒事务数)统计的是事务级别的处理能力,一个事务可能包含多个请求。QPS(每秒请求数)统计的是请求级别的处理能力。例如一个登录事务包含验证码和登录两个请求,那么TPS为1时QPS为2。

问: 响应时间的P95、P99是什么意思?
答: P95表示95%的请求响应时间都小于这个值,P99表示99%的请求响应时间都小于这个值。例如P95为500ms意味着95%的请求响应时间都在500ms以内。这些指标用于衡量系统在高压下的性能表现。

问: 平均处理时间和平均响应时间有什么区别?
答: 平均处理时间是服务端实际处理请求的时间,不包含网络传输时间。平均响应时间是客户端发起请求到收到响应的完整时间,包含了网络传输时间。通常平均响应时间会大于平均处理时间。

问: 并发用户数和活跃线程数是什么关系?
答: 并发用户数是压测计划中设置的目标值,表示模拟的用户数量。活跃线程数是当前正在执行请求的实际线程数,可能会因为响应时间变化而波动。理想情况下活跃线程数应接近并发用户数。

问: 错误率统计包含哪些类型的错误?
答: 错误率包含三类:1.发压异常(请求发送失败) 2.断言失败(响应不符合断言条件) 3.状态码错误(HTTP状态码异常)。总错误率是这三类错误的总和。建议错误率控制在1%以内。

问: 带宽统计中的接收带宽和发送带宽如何理解?
答: 发送带宽是压力机向被测系统发送请求的数据量,接收带宽是压力机接收响应的数据量。单位通常是KB/s或MB/s。这两个指标可以帮助判断网络是否成为瓶颈。

问: 压测记录中的事务成功率为0但请求成功率正常是什么原因?
答: 这种情况通常是因为事务级别的断言设置不合理。即使所有请求都成功执行,如果不满足事务断言条件(如响应时间超过预期),事务也会被判定为失败。建议检查事务断言设置是否合理。

问: 总请求数和采样请求数的区别是什么?
答: 总请求数是压测过程中实际发送的所有请求数量。采样请求数是用于计算性能指标的样本数量,通常小于总请求数。这是因为系统会对数据进行采样,以提高处理效率和节省存储空间。

问: 吞吐量和TPS/QPS的关系是什么?
答: 吞吐量表示单位时间内处理的数据量,单位通常是Byte/s。而TPS/QPS表示单位时间内处理的事务/请求数。两者都是衡量系统处理能力的指标,但从不同维度进行衡量。

问: 为什么链路追踪中的耗时与响应时间不一致?
答: 因为测量维度不同:1.链路追踪显示的是服务端各处理环节的实际耗时 2.响应时间是客户端感知到的完整耗时,包括网络传输时间。另外,由于采样策略的差异,可能会导致两边统计的请求样本不完全一致。

问: 为什么压测过程中数据没有展示出来?
答: 可能有以下原因:1.压力机版本未升级,需检查版本。2.XSea服务器或压力机资源不足,如磁盘使用率过高。3.Flink服务异常。建议按顺序排查这些问题。

问: JMeter脚本在本地运行正常,但在平台上调试失败是什么原因?
答: 常见原因有:1.脚本依赖的数据文件或三方依赖未上传。2.脚本使用了域名但平台未配置DNS。3.使用了一次性数据但已被本地消耗。4.脚本中的IP在压力机无法访问。建议逐一排查。

问: 为什么安装了Java探针但在应用列表中看不到实例?
答: 需要排查:1.确认使用的探针包版本是否与应用JDK版本匹配。2.检查应用启动参数中-javaagent配置是否正确。3.检查XCenter的17951/17950端口是否开通。4.查看探针日志中的common-error.log是否有报错。

问: 压测记录中显示'socket closed'报错是什么原因?
答: 这通常是因为未执行压力机的环境初始化脚本导致的。该脚本会修改操作系统的网络参数。请确保在使用压力机之前执行环境初始化脚本。

问: 同一服务器上多个应用的CPU监控数据为什么不一致?
答: 这是因为每个应用安装的Java探针都独立采集主机资源数据,由于采集时间存在毫秒级差异,导致同一时刻的数据可能有所不同。这是正常现象。

问: 为什么TPS和响应时间趋势图的时间刻度与资源监控不对齐?
答: 这是因为压测数据和监控数据采集存储是独立的。资源监控数据从Prometheus查询,其采集存在时间偏差。且系统定时拉取不同服务器的监控数据时,响应时间有差异,导致时间刻度不完全一致。

问: 调用链路里显示traceid不存在是什么原因?
答: 可能原因有:1.消息消费较慢,需增加kafka分区。2.非HTTP请求不会设置链路header。3.调用的应用未部署探针。4.探针部署失败导致无链路数据。建议先确认探针部署状态。

问: 如何排查定时任务执行失败的问题?
答: 建议:1.检查XSea服务日志。2.查看压力机是否可用。3.确认定时任务配置的cron表达式是否正确。4.检查关联的目标和脚本是否存在。5.查看系统参数中的任务超时时间配置是否合理。

问: 为什么压测记录评估项不通过但记录状态显示通过?
答: 这种情况通常是因为存在延迟的消息数据。压测结束后,平台仍会继续接收处理数据。最后到达的数据计算后不符合评估项,导致评估项显示不通过,但记录状态已固定为通过。

问: 临时需要修复压力机问题,如何重新部署xshark?
答: 步骤:1.通过ps -ef|grep xshark找到安装目录并kill进程。2.备份原xshark目录。3.解压新的xshark包并修改配置。4.进入bin目录执行sh run.sh启动。注意保留原配置文件以便对比。

问: 压测页面最上方的总体数据(总事务数、TPS等)是从哪里来的?
答: 压测中数据流转为:JMeter sampler -> 聚合器 -> xshark -> xcenter -> kafka -> flink -> xsea。压测结束后直接从ES读取,因为flink传数据给xsea时会在ES存一份。

问: 事务统计表格的数据来源是什么?
答: 事务统计表格数据流转同最上方总体数据:压测中经过JMeter->xshark->xcenter->kafka->flink->xsea,压测结束后从ES读取。这些数据包含了事务级别的TPS、响应时间等统计信息。

问: 调用链路的数据是如何获取的?
答: 调用链路数据通过xsky系统获取,xsky内部从ClickHouse读取。这些数据来自于安装在应用上的探针采集,可以展示请求的完整调用链和各环节的耗时。

问: TPS和响应时间趋势图的数据来源是什么?
答: 压测中:数据从JMeter sampler经聚合器->xshark->xcenter->kafka->flink,最后存入ES。压测结束后直接从ES查询。趋势图按照不同压测时长会有不同的聚合粒度。

问: CPU和内存趋势图的数据是怎么采集的?
答: CPU和内存数据通过安装在应用上的agent监控模块采集。数据流转为:agent->kafka->flink->prometheus->xsky。压测结束后的分析阶段,xsea会将表格数据存入MySQL。

问: 资源监控和压力机监控的数据从哪里来?
答: 这些数据通过agent里的monitor模块上报。应用资源监控和压力机监控在压测中从xsky读取,压测结束后从MySQL读取。数据包含CPU、内存、网络等多个维度的监控指标。

问: 中间件监控(MySQL/Redis/Kafka)的数据来源是什么?
答: 中间件监控数据通过Prometheus的exporter插件采集。压测中从xsky读取,压测结束后存储在MySQL中。包含了各类中间件特有的性能指标。

问: 慢SQL的数据是如何采集的?
答: 慢SQL数据通过安装在应用上的Java探针采集,数据流转路径为:探针->xsky。压测中从xsky读取,压测结束后数据存储在MySQL中。可以展示SQL执行时间超过阈值的语句。

问: dashboard中的监控图表数据从哪里获取?
答: 所有dashboard的数据都从xsky读取。xsea前端会调用xsky接口并传入:开始时间、结束时间、IP等环境信息作为参数,然后展示xsky返回的监控数据。

问: 为什么压测中和压测结束后数据的来源会不一样?
答: 为了实时性和性能考虑,压测中主要从原始数据流获取。压测结束后,数据会被持久化到ES或MySQL等存储中,从这些存储中查询可以提供更好的查询性能。

问: 如何开始一个新的性能测试项目流程?
答: 标准流程:1.创建产品(按业务线划分)。2.在产品下创建测试计划(包含版本、时间等信息)。3.编写或导入测试脚本。4.在被测应用上部署探针。5.创建测试目标并关联脚本。6.设置压测参数和评估项。7.执行压测。8.分析结果并生成报告。

问: 如何正确部署和验证探针?
答: 步骤:1.在个人中心-探针管理下载对应JDK版本的探针包。2.在应用启动参数中添加-javaagent参数指向探针。3.配置应用名称和XCenter地址。4.重启应用。5.在个人中心-应用管理中查看实例是否在线。验证:可通过脚本调试查看是否有链路数据。

问: 如何创建和管理测试脚本?
答: 方法:1.选择脚本类型(支持JMeter、Gatling、Shell、SeaMeter)。2.可使用文件夹对脚本分类管理。3.上传脚本时注意检查数据文件和依赖。4.通过调试功能验证脚本正确性。5.可以设置脚本共享给其他用户。规范:JMeter脚本需注意线程组命名不重复,事务名不重复等。

问: 如何设置合适的测试目标?
答: 步骤:1.选择目标类型(基准场景/单场景/混合场景/稳定性)。2.关联测试脚本。3.配置并发用户数和持续时间。4.设置前后置任务。5.配置被测资源(应用、主机、中间件)。6.设置评估项(响应时间、TPS等指标)。7.选择压力机。核心是根据测试目的选择合适的场景类型。

问: 压测执行过程中需要关注哪些指标?
答: 关键指标:1.实时TPS和响应时间趋势。2.错误率。3.并发用户数。4.应用CPU和内存使用率。5.中间件性能指标。6.评估项是否达标。如发现异常可以:查看调用链路,分析瓶颈应用,查看错误日志,观察资源使用情况。

问: 如何管理测试数据文件?
答: 使用数据工厂管理:1.支持参数化文件(csv/txt)和非参数化文件。2.参数化文件首行必须为变量名。3.可选择是否拆分(对应一次性/重复使用)。4.多个脚本可以共用数据文件。5.建议大文件通过压力机本地路径使用,避免上传。

问: 如何分析性能瓶颈?
答: 方法:1.查看事务统计找出响应最慢的请求。2.点击链路图标查看调用链。3.在瓶颈应用中查看最慢应用排行。4.点击查看耗时分析,可看到代码级调用栈和耗时。5.查看慢SQL和中间件指标。6.将发现的问题记录到问题库中便于后续优化。

问: 如何生成性能测试报告?
答: 步骤:1.选择计划下的目标记录。2.可以组合多个不同类型目标的记录。3.配置报告模板(可自定义)。4.添加测试结论和问题记录。5.可以导出Word格式。注意:建议提前将重要记录关联到报告,避免因数据保存时效导致数据缺失。

问: 如何设置定时任务?
答: 配置方法:1.在目标页面设置定时任务。2.配置crontab表达式(支持分钟、小时、日、月、周)。3.可设置邮件通知。4.支持多个目标顺序执行。注意:建议错峰设置避免同时执行,确保压力机资源充足。

问: 如何进行多人协作测试?
答: 协作方式:1.使用产品进行数据隔离。2.通过权限管理控制用户访问范围。3.利用脚本共享功能共享资源。4.使用数据工厂共享测试数据。5.通过问题库沉淀和共享测试发现的问题。这样可以提高团队测试效率。